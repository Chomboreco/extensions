<?php
/**
 * Bliki feed for the Bliki extension
 * 
 * See http://www.organicdesign.co.nz/bliki for more detail
 *
 * @package MediaWiki
 * @subpackage Extensions
 * @ingroup API
 * @author [http://www.organicdesign.co.nz/aran Aran Dunkley]
 * @copyright Â© 2015 [http://www.organicdesign.co.nz/aran Aran Dunkley]
 * @licence GNU General Public Licence 2.0 or later
 */

class ApiBlikiFeed extends ApiBase {

	/**
	 * This module uses a custom feed wrapper printer.
	 *
	 * @return ApiFormatFeedWrapper
	 */
	public function getCustomPrinter() {
		return new ApiFormatFeedWrapper( $this->getMain() );
	}

	/**
	 * Format the rows (generated by SpecialRecentchanges or SpecialRecentchangeslinked)
	 * as an RSS/Atom feed.
	 */
	public function execute() {
		$this->params = $this->extractRequestParams();
		$config = $this->getConfig();
		if ( !$config->get( 'Feed' ) ) {
			$this->dieUsage( 'Syndication feeds are not available', 'feed-unavailable' );
		}

		$feedClasses = $config->get( 'FeedClasses' );
		if ( !isset( $feedClasses[$this->params['feedformat']] ) ) {
			$this->dieUsage( 'Invalid subscription feed type', 'feed-invalid' );
		}

		$this->getMain()->setCacheMode( 'public' );
		if ( !$this->getMain()->getParameter( 'smaxage' ) ) {
			// bug 63249: This page gets hit a lot, cache at least 15 seconds.
			$this->getMain()->setCacheMaxAge( 15 );
		}

		$feedFormat = $this->params['feedformat'];
		$formatter = $this->getFeedObject( $feedFormat );
		$feedItems = $this->getItems();
		ApiFormatFeedWrapper::setResult( $this->getResult(), $formatter, $feedItems );
	}

	/**
	 * Our query is on the whole revision table not just recent changes
	 */
	private function getItems() {
		global $wgBlikiDefaultCat;
		$dbr = wfGetDB( DB_SLAVE );

		// Make the query condition and options
		$opts = array( 'ORDER BY' => 'rev_timestamp DESC' );
		$cat = $this->params['q'] ?: $wgBlikiDefaultCat;
		$cat = Title::newFromText( $cat, NS_CATEGORY )->getDBkey();
		$cond = array(
			'page_id = rev_page',
			'rev_deleted = 0',
			'rev_parent_id = 0',
			'cl_from = page_id',
			'cl_to' => $cat
		);

		// Update the query condition and opts with the API params
		if( $this->params['from'] ) $cond[] = 'rev_timestamp > ' . intval( $this->params['from'] );
		elseif( $this->params['days'] ) $cond[] = 'rev_timestamp > ' . $dbr->timestamp( time() - intval( $this->param['days'] * 86400 ) );
		print_r($conds);
		if( $this->params['limit'] ) $opts['LIMIT'] = (integer)$this->params['limit'];

		// Do the query
		$res = $dbr->select(
			array( 'page', 'revision', 'categorylinks' ),
			'page_id,rev_timestamp,rev_user_text',
			$cond,
			__METHOD__,
			$opts
		);

		// Build a list of feed items from the resulting article list
		$items = array();
		foreach( $res as $row ) {
			$title = Title::newFromId( $row->page_id );
			$items[] = new FeedItem( // $title, $description, $url, $date = '', $author = '', $comments = ''
				$title->getPrefixedText(),
				$this->desc( $title ),
				$title->getFullUrl(),
				$row->rev_timestamp,
				$row->rev_user_text,
				''
			);
		}
		return $items;
	}

	/**
	 * Return a ChannelFeed object.
	 *
	 * @param string $feedFormat Feed's format (either 'rss' or 'atom')
	 * @return ChannelFeed
	 */
	public function getFeedObject( $feedFormat ) {
		global $wgRequest, $wgSitename;

		// Blog title & description
		$q = $wgRequest->getVal( 'q', false );
		$cat = $q ? Title::newFromText( $q )->getText() : false;
		$tag = $cat ? $this->inCat( 'Tags', $cat ) : false;
		$title = preg_replace( '% *wiki$%i', '', $wgSitename ) . ' blog';
		$desc = $cat ? ( $tag ? "\"$cat\" posts" : lcfirst( $cat ) ) : 'posts';
		$desc = wfMessage( 'bliki-desc', $desc, $wgSitename )->text();

		// Blog URL
		$blog = Title::newFromText( 'Blog' );
		$url = $blog->getFullURL( $cat ? "q=$cat" : '' );

		// No need for a custom class here as it's just for formatting the RSS etc
		$feed = new ChangesFeed( $feedFormat, 'rcfeed' );
		$feedObj = $feed->getFeedObject( $title, $desc, $url );

		return $feedObj;
	}

	/**
	 * Return whether or not the passed title is a member of the passed cat
	 */
	private function inCat( $cat, $title = false ) {
		global $wgTitle;
		if( $title === false ) $title = $wgTitle;
		if( !is_object( $title ) ) $title = Title::newFromText( $title );
		$id  = $title->getArticleID();
		$dbr = wfGetDB( DB_SLAVE );
		$cat = $dbr->addQuotes( Title::newFromText( $cat, NS_CATEGORY )->getDBkey() );
		return $dbr->selectRow( 'categorylinks', '1', "cl_from = $id AND cl_to = $cat" );
	}

	/**
	 * Use the plain-text of the summary for the item description
	 */
	private function desc( $title ) {
		global $wgParser;
		$article = new Article( $title );
		$content = $article->getContent();
		$text = preg_match( "/^.+?1=(.+?)\|2=/s", $content, $m ) ? $m[1] : $title->getText();
		$html = $wgParser->parse( trim( $text ), $title, new ParserOptions(), true, true )->getText();
		$html = preg_replace( '|<a[^<]+<img .+?</a>|', '', $html );
		$desc = strip_tags( $html, '<p><a><i><b><u><s>' );
		$desc = preg_replace( "/[\r\n]+/", "", $desc );
		$desc = preg_replace( "|<p></p>|", "", $desc );
		$desc = trim( preg_replace( "|<p>|", "\n<p>", $desc ) );
		return $desc;
	}

	public function getAllowedParams() {
		$config = $this->getConfig();
		$feedFormatNames = array_keys( $config->get( 'FeedClasses' ) );
		return array(
			'feedformat' => array(
				ApiBase::PARAM_DFLT => 'rss',
				ApiBase::PARAM_TYPE => $feedFormatNames,
			),
			'days' => array(
				ApiBase::PARAM_DFLT => 7,
				ApiBase::PARAM_MIN => 1,
				ApiBase::PARAM_TYPE => 'integer',
			),
			'limit' => array(
				ApiBase::PARAM_DFLT => 50,
				ApiBase::PARAM_MIN => 1,
				ApiBase::PARAM_MAX => $config->get( 'FeedLimit' ),
				ApiBase::PARAM_TYPE => 'integer',
			),
			'from' => array(
				ApiBase::PARAM_TYPE => 'timestamp',
			),
			'q' => array(
				ApiBase::PARAM_TYPE => 'string',
			),
		);
	}

	public function getParamDescription() {
		return array(
			'feedformat' => 'The format of the feed',
			'days' => 'Only show posts since this number of days ago',
			'limit' => 'Maximum number of posts to return',
			'from' => 'Show posts since then',
			'q' => 'Show only posts on pages in this category',
		);
	}

	public function getDescription() {
		return 'Returns a blog feed, see http://www.organicdesign.co.nz/bliki for more information';
	}

	public function getExamples() {
		return array(
			'api.php?action=blikifeed',
			'api.php?action=blikifeed&q=CategoryName'
		);
	}
}
